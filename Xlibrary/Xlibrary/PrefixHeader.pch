//
//  PrefixHeader.pch
//  Xlibrary
//
//  Created by wgl7569 on 15-4-17.
//  Copyright (c) 2015年 mc. All rights reserved.
//

#ifndef Xlibrary_PrefixHeader_pch
#define Xlibrary_PrefixHeader_pch
#endif
#ifdef __OBJC__
    #import "UIBarButtonItem+Ext.h"
    #import <UIKit/UIKit.h>
    #import <Foundation/Foundation.h>
    #import "UIView+Ext.h"
#import "UIColor+conversion.h"
#import "NSString+MyDate.h"
#ifdef DEBUG // 调试状态, 打开LOG功能
#define XLog(...) NSLog(__VA_ARGS__)
#else // 发布状态, 关闭LOG功能
#define     XLog(...)
#endif




#define kScreenHeight [UIScreen mainScreen].bounds.size.height
#define kScreenWidth [UIScreen mainScreen].bounds.size.width
#define FRAME(a,b,c,d) CGRectMake(a,b,c,d)
#define NavaStatusHeight    64.f
#define IMAGE_FILES(s) [UIImage imageWithContentsOfFile:s]
#define ISNULL(s) [s isKindOfClass:[NSNull class]]
#define Label_font(fontSize) [UIFont systemFontOfSize:fontSize];
#define IMAGE_NAMED(name) [UIImage imageNamed:name]
#define COLOR_DIFFERENT_VAULE(a,b,c)[UIColor colorWithRed:a/255.0 green:b/255.0 blue:c/255.0 alpha:1.0]
#define HexRGBA(rgbValue,al) [UIColor colorWithRed:((float)((rgbValue&0xFF0000)>>16))/255.0 green:((float)((rgbValue&0xFF00)>>8))/255.0 blue:((float)(rgbValue&0xFF))/255.0 alpha:al]
#define HexRGB(rgbValue) [UIColor colorWithRed:((float)((rgbValue&0xFF0000)>>16))/255.0 green:((float)((rgbValue&0xFF00)>>8))/255.0 blue:((float)(rgbValue&0xFF))/255.0 alpha:1.0]

#define  NSUSERDEFAULTS(userDetaults) NSUserDefaults *userDetaults = [NSUserDefaults standardUserDefaults];
//    数据库路径
#define MNDB_PATH [[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0] stringByAppendingPathComponent:@"GB.db"]
#define NSStringFormat(str)      ([NSString stringWithFormat:@"%@",str])


#define LINE_COLOR  0xb3b3b3


//LOG
#define LOG_CLASS(clazz) NSLog(@"%@",[NSString stringWithUTF8String:class_getName(clazz)]);

#define __LOG_TYPE__ 0 /** 日志级别:0,debug;1,info,2,warn,3,error **/

#if DEBUG   /**调试模式下输出格式定义**/

#define __PROTOCOL_TYPE__  2 /**协议类别：0、本地协议；1、网路协议；2、测试服务端 **/

#if __LOG_TYPE__==0

#define LOG_ME_DEBUG(fmt, ...) NSLog((@"[DEBUG] %s [Line %d] --- " fmt), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__);
#define LOG_ME_WARN(fmt, ...) NSLog((@"[WARN] %s [Line %d] --- " fmt), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__);
#define LOG_ME_ERROR(fmt, ...) NSLog((@"[ERROR] %s [Line %d] --- " fmt), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__);
#define LOG_ME_INFO(fmt, ...) NSLog((@"[INFO] %s [Line %d] --- " fmt), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__);

#elif __LOG_TYPE__==1

#define LOG_ME_DEBUG(fmt, ...)
#define LOG_ME_WARN(fmt, ...) NSLog((@"[WARN] %s [Line %d] --- " fmt), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__);
#define LOG_ME_ERROR(fmt, ...) NSLog((@"[ERROR] %s [Line %d] --- " fmt), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__);
#define LOG_ME_INFO(fmt, ...) NSLog((@"[INFO] %s [Line %d] --- " fmt), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__);

#elif __LOG_TYPE__==2

#define LOG_ME_DEBUG(fmt, ...)
#define LOG_ME_WARN(fmt, ...) NSLog((@"[WARN] %s [Line %d] --- " fmt), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__);
#define LOG_ME_ERROR(fmt, ...) NSLog((@"[ERROR] %s [Line %d] --- " fmt), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__);
#define LOG_ME_INFO(fmt, ...)

#elif __LOG_TYPE__==3

#define LOG_ME_DEBUG(fmt, ...)
#define LOG_ME_WARN(fmt, ...)
#define LOG_ME_ERROR(fmt, ...) NSLog((@"[ERROR] %s [Line %d] --- " fmt), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__);
#define LOG_ME_INFO(fmt, ...)



#endif
#else

#define __PROTOCOL_TYPE__  1 /**协议类别：0、本地协议；1、网路协议 **/
#define LOG_ME_DEBUG(s,...)
#define LOG_ME_WARN(s,...)
#define LOG_ME_ERROR(s,...)
#define LOG_ME_INFO(s,...)

#define iPhone5 ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(640, 1136), [[UIScreen mainScreen] currentMode].size) : NO)





#endif



//    数据库路径
#define MNDB_PATH [[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0] stringByAppendingPathComponent:@"GB.db"]




#define singleton_h(name) + (instancetype)shared##name;
#define singleton_m(name) \
static id _instance; \
+ (id)allocWithZone:(struct _NSZone *)zone \
{ \
static dispatch_once_t onceToken; \
dispatch_once(&onceToken, ^{ \
_instance = [super allocWithZone:zone]; \
}); \
return _instance; \
} \
\
+ (instancetype)shared##name \
{ \
static dispatch_once_t onceToken; \
dispatch_once(&onceToken, ^{ \
_instance = [[self alloc] init]; \
}); \
return _instance; \
} \
\
+ (id)copyWithZone:(struct _NSZone *)zone \
{ \
return _instance; \
}
// Include any system framework and library headers here that should be included in all compilation units.
// You will also need to set the Prefix Header build setting of one or more of your targets to reference this file.
#endif
